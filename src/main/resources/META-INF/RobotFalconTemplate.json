{"id":"RobotFalconTemplate","robotType":"ROBOT","mainClass":"com.novayre.jidoka.robot.test.RobotFalconTemplate","actions":["start","searchImage","ImgPreprocessing","extractTextFromOCR","brightness","sharpen","end"],"conditionalActions":[],"fieldLinks":[],"actionDetails":[{"id":"start","implementation":"/**\n\t * Initialize the modules\n\t * @throws IOException \n\t */\npublic void start() throws IOException {\n    server = JidokaFactory.getServer();\n    client = IClient.getInstance(this);\n    falcon = IFalcon.getInstance(this, client);\n    images = JidokaImageSupport.getInstance(this);\n    IFalconProcess falconProcess = falcon.getFalconProcess();\n    server.setNumberOfItems(1);\n    server.setCurrentItem(1, images.getTestPng().getDescription());\n}"},{"id":"searchImage","implementation":"/**\n\t * Search image.\n\t * @throws IOException \n\t * @throws AWTException \n\t */\npublic void searchImage() throws IOException, AWTException {\n    IFalconImage testImage = images.getTestPng().search();\n    // Uncomment to apply 25% noise and color tolerance \n    //\t\ttestImage.setTolerance(.25f);\n    //\t\ttestImage.getOptions().colorTolerance(.25f);\n    server.info(\"Searching the image: \" + testImage.getDescription());\n    // Sends the image to the trace\n    falcon.sendImage(testImage.getImage(), \"Test image\");\n    server.info(\"Desktop capture\");\n    server.sendScreen(\"Current desktop\");\n    // Image search on the desktop\n    if (testImage.search().found()) {\n        server.info(\"Image found at: \" + testImage.getPointsWhereFound().get(0));\n        // Draw a rectangle where the image was found\n        drawRectangle(testImage);\n        // Single left click over the image\n        testImage.clickOnCenter();\n        server.setCurrentItemResultToOK();\n    } else {\n        server.warn(\"Image not found\");\n        server.setCurrentItemResultToWarn();\n    }\n}"},{"id":"ImgPreprocessing","implementation":"public void ImgPreprocessing() throws Exception {\n    String inputFilePath = \"C:\\\\Users\\\\Jacinth.A\\\\Documents\\\\714336.jpg\";\n    SetDPI(inputFilePath);\n    String DPI = \"D:\\\\Output file\\\\1.jpg\";\n    extractTextFromOCR();\n    //\n    //\n    BufferedImage defaultImage1 = ImageIO.read(Paths.get(DPI).toFile());\n    server.info(defaultImage1.getWidth() + \"     \" + defaultImage1.getHeight());\n    server.info(defaultImage1.getMinX() + \"  \" + defaultImage1.getMinY());\n    BufferedImage defaultImage = new  BufferedImage(defaultImage1.getWidth(), defaultImage1.getHeight(), defaultImage1.getType());\n    //BufferedImage dest1 = defaultImage1.getSubimage(320, 40,120, 15);\n    //BufferedImage dest1 = defaultImage1.getSubimage(400, 30,150, 35);\n    BufferedImage dest1 = defaultImage1.getSubimage(0, 389, 200, 49);\n    String one = \"D:\\\\Output file\\\\1.jpg\";\n    ImageIO.write(dest1, \"jpg\", new  File(one));\n    /*BufferedImage dest2 = defaultImage1.getSubimage(0, 286,350, 44);\n\t\tString two = \"D:\\\\Output file\\\\1two.jpg\";\n\t\tImageIO.write(dest2, \"jpg\", new File(two));\n\t\tBufferedImage dest3 = defaultImage1.getSubimage(0, 280,350, 45);\n\t\tString three = \"D:\\\\Output file\\\\1three.jpg\";\n\t\tImageIO.write(dest3, \"jpg\", new File(three));\n\t\tBufferedImage dest4 = defaultImage1.getSubimage(0, 279,350, 50);\n\t\tString four = \"D:\\\\Output file\\\\1four.jpg\";\n\t\tImageIO.write(dest4, \"jpg\", new File(four));*/\n    extractTextFromOCR();\n    SetDPI(one);\n    //String inputFilebw = \"D:\\\\Output file\\\\714336.jpg\";\n    BufferedImage image = ImageIO.read(new  File(one));\n    server.info(image.getRGB(1, 2));\n    //sharpen();\n    extractTextFromOCR();\n    blackwhite(image);\n    brightness();\n    extractTextFromOCR();\n    blackwhite(image);\n    BufferedImage defaultImage2 = ImageIO.read(Paths.get(DPI).toFile());\n    falconprocess(defaultImage2);\n}"},{"id":"extractTextFromOCR","implementation":"public void extractTextFromOCR() throws Exception {\n    String inputFile = \"D:\\\\Output file\\\\1.jpg\";\n    Tesseract tesseract = new  Tesseract();\n    tesseract.setDatapath(\"D:\\\\TessData\");\n    tesseract.setLanguage(\"eng\");\n    String ExtractedText = tesseract.doOCR(new  File(inputFile));\n    server.info(\"Text :\" + ExtractedText);\n}"},{"id":"brightness","implementation":"public void brightness() {\n    try {\n        String filename = \"D:\\\\Output file\\\\1.jpg\";\n        //reading image data from file\n        BufferedImage src = ImageIO.read(new  File(filename));\n        /* passing source image and brightening by 50%-value of 1.0f means original brightness */\n        BufferedImage dest = changeBrightness(src, 1.5f);\n        //drawing new image on panel\n        //writing new image to a file in jpeg format\n        String output = \"D:\\\\Output file\\\\1.jpg\";\n        ImageIO.write(dest, \"jpeg\", new  File(output));\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}"},{"id":"sharpen","implementation":"public void sharpen() throws Exception {\n    String inputFile = \"D:\\\\Output file\\\\1.jpg\";\n    BufferedImage inputFile1 = ImageIO.read(Paths.get(inputFile).toFile());\n    Image sourceImage = Toolkit.getDefaultToolkit().getImage(inputFile);\n    GraphicsEnvironment graphicsEnvironment = GraphicsEnvironment.getLocalGraphicsEnvironment();\n    GraphicsDevice graphicsDevice = graphicsEnvironment.getDefaultScreenDevice();\n    GraphicsConfiguration graphicsConfiguration = graphicsDevice.getDefaultConfiguration();\n    image = graphicsConfiguration.createCompatibleImage(inputFile1.getWidth(), inputFile1.getHeight(), Transparency.BITMASK);\n    Graphics graphics = image.createGraphics();\n    graphics.drawImage(sourceImage, 0, 0, null);\n    graphics.dispose();\n    Kernel kernel = new  Kernel(3, 3, new float[] { -1, -1, -1, -1, 9, -1, -1, -1, -1 });\n    BufferedImageOp op = new  ConvolveOp(kernel);\n    //image = op.filter(image, null);\n    image = op.filter(inputFile1, null);\n    File outputfile = new  File(\"D:\\\\Output file\\\\1.jpg\");\n    ImageIO.write(image, \"jpg\", outputfile);\n}"},{"id":"end","implementation":"/**\n\t * End.\n\t */\npublic void end() {\n}"}],"conditionalActionDetails":[],"sdkMethods":[]}